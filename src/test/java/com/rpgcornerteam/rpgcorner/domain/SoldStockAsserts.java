package com.rpgcornerteam.rpgcorner.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SoldStockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoldStockAllPropertiesEquals(SoldStock expected, SoldStock actual) {
        assertSoldStockAutoGeneratedPropertiesEquals(expected, actual);
        assertSoldStockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoldStockAllUpdatablePropertiesEquals(SoldStock expected, SoldStock actual) {
        assertSoldStockUpdatableFieldsEquals(expected, actual);
        assertSoldStockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoldStockAutoGeneratedPropertiesEquals(SoldStock expected, SoldStock actual) {
        assertThat(expected)
            .as("Verify SoldStock auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoldStockUpdatableFieldsEquals(SoldStock expected, SoldStock actual) {
        assertThat(expected)
            .as("Verify SoldStock relevant properties")
            .satisfies(e -> assertThat(e.getSupplie()).as("check supplie").isEqualTo(actual.getSupplie()))
            .satisfies(e -> assertThat(e.getUnitPrice()).as("check unitPrice").isEqualTo(actual.getUnitPrice()))
            .satisfies(e -> assertThat(e.getReturnedSupplie()).as("check returnedSupplie").isEqualTo(actual.getReturnedSupplie()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoldStockUpdatableRelationshipsEquals(SoldStock expected, SoldStock actual) {
        assertThat(expected)
            .as("Verify SoldStock relationships")
            .satisfies(e -> assertThat(e.getSoldWare()).as("check soldWare").isEqualTo(actual.getSoldWare()))
            .satisfies(e -> assertThat(e.getSale()).as("check sale").isEqualTo(actual.getSale()));
    }
}
